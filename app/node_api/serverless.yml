service: gcf-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  pictureBucket: 'gcf-pictures-${self:provider.stage}'
  userTableName: 'user-Table-${self:provider.stage}'
  clientTableName: 'client-Table-${self:provider.stage}'
  projectTableName: 'project-Table-${self:provider.stage}'
  activityTableName: 'activity-Table-${self:provider.stage}'
  receiptTableName: 'receipt-Table-${self:provider.stage}'
  stageTableName: 'stage-Table-${self:provider.stage}'
  tokenTableName: 'token-Table-${self:provider.stage}'
  trashTableName: 'trash-Table-${self:provider.stage}'
  activityUrl: 'https://iggpamghta.execute-api.us-east-1.amazonaws.com/dev/activities'

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  memorySize: 128
  region: us-east-1
  role: arn:aws:iam::675462175633:role/gcf-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ClientsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ProjectsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["StagesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ReceiptsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ActivitiesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["TokensDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["TrashDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - { "Fn::GetAtt": ["S3Bucket", "Arn" ]} 
  
  environment:
    S3_PICTURE_BUCKET: ${self:custom.pictureBucket}
    USERS_TABLE: ${self:custom.userTableName}
    CLIENTS_TABLE: ${self:custom.clientTableName}
    PROJECTS_TABLE: ${self:custom.projectTableName}
    ACTIVITIES_TABLE: ${self:custom.activityTableName}
    RECEIPTS_TABLE: ${self:custom.receiptTableName}
    STAGES_TABLE: ${self:custom.stageTableName}
    TOKENS_TABLE: ${self:custom.tokenTableName}
    TRASH_TABLE: ${self:custom.trashTableName}
    ACTIVITY_URL: ${self:custom.activityUrl}


functions:

  picturesFunction:
    handler: picture-handler/handler.handler
    events:
      - http:
          path: pictures
          method: post
          cors: true

  usersFunction:
    handler: user-handler/handler.handler
    events:
      - http:
          path: users
          method: get
          cors: true

      - http:
          path: users/{userId}
          method: get
          cors: true

      - http:
          path: users/login
          method: post
          cors: true
          
      - http:
          path: users/logout 
          method: post
          cors: true
      
      - http:
          path: users
          method: post
          cors: true
      
      - http:
          path: users/{userId}
          method: put
          cors: true
      
      - http:
          path: users/{userId}
          method: delete
          cors: true

  stagesFunction:
    handler: stage-handler/handler.handler
    events:
      - http:
          path: stages/stagesByProject/{project_id}
          method: get
          cors: true

      - http:
          path: stages/{stageId}
          method: get
          cors: true
          
      - http:
          path: stages
          method: post
          cors: true
      
      - http:
          path: stages/{stageId}
          method: put
          cors: true
      
      - http:
          path: stages/{stageId}
          method: delete
          cors: true

  receiptsFunction:
    handler: receipt-handler/handler.handler
    events:
      - http:
          path: receipts
          method: get
          cors: true
      - http:
          path: receipts/receiptsByUser/{user_id}
          method: get
          cors: true

      - http:
          path: receipts/receiptsByProject/{project_id}
          method: get
          cors: true

      - http:
          path: receipts/{receiptId}
          method: get
          cors: true
          
      - http:
          path: receipts
          method: post
          cors: true
      
      - http:
          path: receipts/{receiptId}
          method: put
          cors: true
      
      - http:
          path: receipts/{receiptId}
          method: delete
          cors: true

  projectsFunction:
    handler: project-handler/handler.handler
    events:
      - http:
          path: projects
          method: get
          cors: true

      - http:
          path: projects/{projectId}
          method: get
          cors: true
            
      - http:
          path: projects
          method: post
          cors: true
      
      - http:
          path: projects/{projectId}
          method: put
          cors: true
        
      - http:
          path: projects/{projectId}
          method: delete
          cors: true

  clientsFunction:
    handler: client-handler/handler.handler
    events:
      - http:
          path: clients
          method: get
          cors: true

      - http:
          path: clients/{clientId}
          method: get
          cors: true
            
      - http:
          path: clients
          method: post
          cors: true
      
      - http:
          path: clients/{clientId}
          method: put
          cors: true
        
      - http:
          path: clients/{clientId}
          method: delete
          cors: true

  activitiesFunction:
    handler: activity-handler/handler.handler
    events:
      - http:
          path: activities/activitiesByProject/{project_id}
          method: get
          cors: true

      - http:
          path: activities/{activityId}
          method: get
          cors: true
          
      - http:
          path: activities
          method: get
          cors: true

      - http:
          path: activities
          method: post
          cors: true


resources:
  Resources:



    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.pictureBucket}
       # AccessControl: PublicRead
      
        
    S3BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      DependsOn: S3Bucket
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:*'
              Resource:  { "Fn::GetAtt": ["S3Bucket", "Arn" ] } #arn:aws:s3:::${self:custom.pictureBucket}*
        Bucket:
          Ref: S3Bucket


    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: N
          -
            AttributeName: email
            AttributeType: S
          -
            AttributeName: password
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: authIndex
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
              - 
                AttributeName: password
                KeyType: RANGE 
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTableName}

    ClientsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: clientId
            AttributeType: N
        KeySchema:
          -
            AttributeName: clientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.clientTableName}

    StagesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: stageId
            AttributeType: N
        KeySchema:
          -
            AttributeName: stageId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.stageTableName}

    ReceiptsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: receiptId
            AttributeType: N
        KeySchema:
          -
            AttributeName: receiptId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.receiptTableName}

    ProjectsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: projectId
            AttributeType: N
        KeySchema:
          -
            AttributeName: projectId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.projectTableName}

    ActivitiesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: activityId
            AttributeType: N
        KeySchema:
          -
            AttributeName: activityId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.activityTableName}

    TokensDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: token
            AttributeType: S
        KeySchema:
          -
            AttributeName: token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tokenTableName}

    TrashDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: trashId
            AttributeType: N
        KeySchema:
          -
            AttributeName: trashId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.trashTableName}


service: gcf-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  userTableName: 'user-Table-${self:provider.stage}'
  clientTableName: 'client-Table-${self:provider.stage}'
  projectTableName: 'project-Table-${self:provider.stage}'
  notificationTableName: 'notification-Table-${self:provider.stage}'
  receiptTableName: 'receipt-Table-${self:provider.stage}'
  stageTableName: 'stage-Table-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  memorySize: 128
  region: us-east-1
  role: arn:aws:iam::675462175633:role/gcf-role
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ClientsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ProjectsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["StagesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ReceiptsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["NotificationsDynamoDBTable", "Arn" ] }
  
  environment:
    USERS_TABLE: ${self:custom.userTableName}
    CLIENTS_TABLE: ${self:custom.clientTableName}
    PROJECTS_TABLE: ${self:custom.projectTableName}
    NOTIFICATIONS_TABLE: ${self:custom.notificationTableName}
    RECEIPTS_TABLE: ${self:custom.receiptTableName}
    STAGES_TABLE: ${self:custom.stageTableName}



functions:
  usersFunction:
    handler: user-handler/handler.handler
    events:
      - http:
          path: users
          method: get
          cors: true

      - http:
          path: users/{userid}
          method: get
          cors: true

      - http:
          path: users/login
          method: post
          cors: true
          
      - http:
          path: users
          method: post
          cors: true
      
      - http:
          path: users/{userId}
          method: put
          cors: true
      
      - http:
          path: users/{userId}
          method: delete
          cors: true

  stagesFunction:
    handler: stage-handler/handler.handler
    events:
      - http:
          path: stages
          method: get
          cors: true

      - http:
          path: stages/{stageid}
          method: get
          cors: true
          
      - http:
          path: stages
          method: post
          cors: true
      
      - http:
          path: stages/{stageid}
          method: put
          cors: true
      
      - http:
          path: stages/{stageid}
          method: delete
          cors: true
        
  receiptsFunction:
    handler: receipt-handler/handler.handler
    events:
      - http:
          path: receipts
          method: get
          cors: true

      - http:
          path: receipts/{receiptid}
          method: get
          cors: true
          
      - http:
          path: receipts
          method: post
          cors: true
      
      - http:
          path: stages/{stageid}
          method: put
          cors: true
      
      - http:
          path: receipts/{receiptid}
          method: delete
          cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: N
          -
            AttributeName: email
            AttributeType: S
          -
            AttributeName: password
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: authIndex
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
              - 
                AttributeName: password
                KeyType: RANGE 
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTableName}

    ClientsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: clientId
            AttributeType: N
        KeySchema:
          -
            AttributeName: clientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.clientTableName}

    StagesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: stageId
            AttributeType: N
        KeySchema:
          -
            AttributeName: stageId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.stageTableName}

    ReceiptsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: receiptId
            AttributeType: N
        KeySchema:
          -
            AttributeName: receiptId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.receiptTableName}

    ProjetsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: projectId
            AttributeType: N
        KeySchema:
          -
            AttributeName: projectId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.projectTableName}

    NotificationsDynamoDBTable:
        Type: 'AWS::DynamoDB::Table'
        Properties:
          AttributeDefinitions:
            -
              AttributeName: notificationId
              AttributeType: N
          KeySchema:
            -
              AttributeName: notificationId
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
          TableName: ${self:custom.notificationTableName}
